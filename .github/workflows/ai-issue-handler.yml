# Workflow name
name: AI Issue Handler V3 (Review Required)

# Triggers for the workflow
on:
  # When an issue is opened or labeled with 'ai-fix'
  issues:
    types: [opened, labeled]
  # Allow manual triggering with optional inputs
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to process manually'
        required: true
      min_issue_upvotes:
        description: 'Minimum issue upvotes required to trigger PR'
        required: false
        default: '1'
      # Removed min_pr_upvotes as auto-merge is disabled for security
      ai_context:
        description: 'Additional context for the AI'
        required: false
        default: |
          This is a React hook for form management.
          The main file is src/lib/useForm.ts.
          Follow React best practices, maintain type safety, and add necessary comments.
      target_file:
        description: 'File path for AI to modify'
        required: false
        default: 'src/lib/useForm.ts'
      ai_reviewer:
        description: 'GitHub username or team slug for AI review request (e.g., github-copilot[bot] or org/copilot-team)'
        required: false
        default: 'copilot' # Defaulting to 'copilot' team slug
      openai_model:
        description: 'OpenAI model to use (e.g., gpt-4, gpt-3.5-turbo)'
        required: false
        default: 'gpt-4' # Or 'gpt-3.5-turbo' for faster/cheaper generation

# Permissions required by the workflow
# WARNING: These grant significant write access. Ensure security best practices.
permissions:
  contents: write      # To checkout code, commit, push, create branches, create PRs
  issues: write        # To read issues, comment on issues
  pull-requests: write # To create PRs, comment on PRs, request reviewers
  actions: read        # To read workflow inputs/variables

# Concurrency control: Ensures only one instance runs per branch at a time.
# Prevents race conditions if multiple issues trigger the workflow quickly.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Environment variables available to all jobs
env:
  # Minimum upvotes (+1 reactions) required on the ISSUE to trigger a PR
  MIN_ISSUE_UPVOTES: ${{ github.event.inputs.min_issue_upvotes || vars.DEFAULT_MIN_ISSUE_UPVOTES || '1' }}
  # Context provided to the AI model
  AI_CONTEXT: "${{ github.event.inputs.ai_context || 'Default AI context: Please adhere to project conventions.' }}"
  # The file the AI should modify
  TARGET_FILE: ${{ github.event.inputs.target_file || 'src/lib/useForm.ts' }}
  # The user or team to request review from
  AI_REVIEWER: ${{ github.event.inputs.ai_reviewer || 'copilot' }}
  # OpenAI Model
  OPENAI_MODEL: ${{ github.event.inputs.openai_model || 'gpt-4' }}
  # Use a Personal Access Token (PAT) with necessary scopes (repo, issue:write, pull-request:write).
  # GITHUB_TOKEN has limitations (e.g., triggering other workflows, potentially bypassing branch protection if allowed).
  # ACTION_PAT is recommended for reliability. Ensure it has MINIMUM required permissions.
  ACTION_PAT: ${{ secrets.ACTION_PAT || secrets.GITHUB_TOKEN }} # Fallback to GITHUB_TOKEN if PAT not set, but functionality may be limited

jobs:
  # Job: Process the issue, generate AI fix, and create a PR for REVIEW
  process_issue_and_create_pr:
    runs-on: ubuntu-latest
    outputs:
      pr_number: ${{ steps.create_pr.outputs.pr_number }}
      branch_name: ${{ steps.create_branch.outputs.branch_name }}
      processed_issue_number: ${{ steps.check_issue.outputs.issue_number }}
      # No longer outputting should_run_merge_job as auto-merge is removed

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch full history (useful for AI context or merge conflict resolution)
          # Set fetch-depth: 1 if full history isn't needed to speed up checkout.
          fetch-depth: 0
          # Use PAT for checkout if you need to push later or access private submodules
          # token: ${{ env.ACTION_PAT }} # Usually not needed just for checkout unless submodules require it

      # Step 2: Get Default Branch Name (needed early for pulling latest changes)
      - name: Get Default Branch
        id: default_branch
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.ACTION_PAT }} # Use PAT for consistency, GITHUB_TOKEN likely sufficient
          script: |
            const { data: repo } = await github.rest.repos.get({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            console.log(`Repository default branch: ${repo.default_branch}`);
            core.setOutput('name', repo.default_branch);

      # Step 3: Check Issue Details and Upvotes
      - name: Check Issue Details & Upvotes
        id: check_issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.ACTION_PAT }} # Use PAT for reliable API access
          result-encoding: string # Ensure outputs are strings
          script: |
            const fs = require('fs');
            const minUpvotes = parseInt(process.env.MIN_ISSUE_UPVOTES);
            let issueNumber;

            // Determine issue number based on trigger event
            if (context.eventName === 'workflow_dispatch') {
              issueNumber = parseInt(context.payload.inputs.issue_number);
              if (isNaN(issueNumber)) {
                  core.setFailed(`Invalid issue number provided via workflow_dispatch: ${context.payload.inputs.issue_number}`);
                  return;
              }
              console.log(`Processing issue #${issueNumber} via workflow_dispatch.`);
            } else if (context.payload.issue) {
              issueNumber = context.payload.issue.number;
              console.log(`Processing issue #${issueNumber} triggered by issue event '${context.payload.action}'.`);
              // If triggered by 'labeled', check if the label is 'ai-fix'
              if (context.payload.action === 'labeled' && context.payload.label.name !== 'ai-fix') {
                  console.log(`Issue #${issueNumber} was labeled with '${context.payload.label.name}', not 'ai-fix'. Skipping.`);
                  // Set output via environment file for conditional steps
                  fs.appendFileSync(process.env.GITHUB_OUTPUT, `should_process=false\n`);
                  return;
              }
            } else {
              console.log('Workflow triggered by unexpected event or payload structure. Cannot determine issue number.');
              core.setFailed('Could not determine the issue number from the event payload.');
              return;
            }

            // Set issue number output early for potential use even if skipped later
            fs.appendFileSync(process.env.GITHUB_OUTPUT, `issue_number=${issueNumber}\n`);

            // Fetch issue details
            try {
              const { data: issue } = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
              });

              console.log(`Issue Title: ${issue.title}`);
              console.log(`Issue State: ${issue.state}`);
              console.log(`Issue Reactions (+1): ${issue.reactions?.['+1'] || 0}`);

              // --- Gate Checks ---
              // 1. Check if the issue is open
              if (issue.state !== 'open') {
                console.log(`Issue #${issueNumber} is not open (state: ${issue.state}). Skipping.`);
                fs.appendFileSync(process.env.GITHUB_OUTPUT, `should_process=false\n`);
                return;
              }

              // 2. Check for minimum upvotes
              const upvotes = issue.reactions?.['+1'] || 0;
              if (upvotes < minUpvotes) {
                console.log(`Issue #${issueNumber} has ${upvotes} upvotes, but requires ${minUpvotes}. Skipping.`);
                fs.appendFileSync(process.env.GITHUB_OUTPUT, `should_process=false\n`);
                return;
              }
              // --- End Gate Checks ---

              console.log(`Issue #${issueNumber} meets criteria (${upvotes}/${minUpvotes} upvotes, state: open). Proceeding.`);
              // Use GITHUB_OUTPUT for multiline content
              fs.appendFileSync(process.env.GITHUB_OUTPUT, `should_process=true\n`);
              fs.appendFileSync(process.env.GITHUB_OUTPUT, `issue_title<<EOF\n${issue.title || ''}\nEOF\n`);
              fs.appendFileSync(process.env.GITHUB_OUTPUT, `issue_body<<EOF\n${issue.body || ''}\nEOF\n`);

            } catch (error) {
              console.error(`Error fetching or checking issue #${issueNumber}: ${error.message}`);
              console.error(error.stack);
              core.setFailed(`Failed to process issue #${issueNumber}: ${error.message}`);
              fs.appendFileSync(process.env.GITHUB_OUTPUT, `should_process=false\n`);
            }

      # Step 4: Create a new branch for the fix
      - name: Create Fix Branch
        id: create_branch
        if: steps.check_issue.outputs.should_process == 'true'
        run: |
          git config --global user.name "GitHub Actions AI Bot"
          git config --global user.email "actions-ai@github.com" # Use a more specific email

          ISSUE_NUMBER="${{ steps.check_issue.outputs.issue_number }}"
          ISSUE_TITLE="${{ steps.check_issue.outputs.issue_title }}" # Read directly from output
          DEFAULT_BRANCH="${{ steps.default_branch.outputs.name }}"

          # Sanitize title slightly for branch name (remove special chars, limit length)
          # Use printf to avoid issues with leading hyphens in title
          SANITIZED_TITLE=$(printf "%s" "$ISSUE_TITLE" | sed 's/[^a-zA-Z0-9-]/-/g' | cut -c 1-50)
          TIMESTAMP=$(date +%s)
          BRANCH_NAME="ai-fix/issue-${ISSUE_NUMBER}-${SANITIZED_TITLE}-${TIMESTAMP}"
          BRANCH_NAME=$(echo $BRANCH_NAME | tr '[:upper:]' '[:lower:]') # Ensure lowercase branch name

          # Ensure base branch is up-to-date before branching
          echo "Checking out and pulling latest changes from default branch: $DEFAULT_BRANCH"
          git checkout $DEFAULT_BRANCH
          # Use PAT in git pull if needed for private repos/auth, but typically not required if checkout worked
          git pull origin $DEFAULT_BRANCH

          echo "Creating branch: $BRANCH_NAME"
          git checkout -b $BRANCH_NAME

          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      # ====================================================================
      # Step 5: Apply AI Fix using OpenAI API
      # ====================================================================
      - name: Apply AI Fix via OpenAI
        id: apply_ai_fix
        if: steps.check_issue.outputs.should_process == 'true'
        env:
          # Provide necessary data to the Python script via environment variables
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          TARGET_FILE: ${{ env.TARGET_FILE }}
          # Pass raw issue title/body via env vars for the script
          ISSUE_TITLE: ${{ steps.check_issue.outputs.issue_title }}
          ISSUE_BODY: ${{ steps.check_issue.outputs.issue_body }}
          AI_CONTEXT: ${{ env.AI_CONTEXT }}
          OPENAI_MODEL: ${{ env.OPENAI_MODEL }}
        run: |
          pip install openai~=1.0 # Install openai v1.x library

          # Use python3 explicitly with proper heredoc syntax
          python3 << 'EOF'
          import os
          import sys
          import re
          from openai import OpenAI, RateLimitError, APIError

          # --- Configuration ---
          target_file_path = os.getenv('TARGET_FILE')
          openai_api_key = os.getenv('OPENAI_API_KEY')
          # Read raw title/body from environment variables (no decoding needed now)
          issue_title = os.getenv('ISSUE_TITLE', '')
          issue_body = os.getenv('ISSUE_BODY', '')
          ai_context = os.getenv('AI_CONTEXT', '')
          model_name = os.getenv('OPENAI_MODEL', 'gpt-4')

          # Basic validation
          if not target_file_path:
              print("::error::TARGET_FILE environment variable not set.")
              sys.exit(1)
          if not openai_api_key:
              print("::error::OPENAI_API_KEY secret not set.")
              sys.exit(1)
          if not issue_body:
              print("::warning::Issue body is empty. AI results might be poor.")
              # Consider failing if body is required: sys.exit(1)

          print(f"Target file: {target_file_path}")
          print(f"Using OpenAI model: {model_name}")

          # --- Read Target File ---
          try:
              with open(target_file_path, 'r', encoding='utf-8') as f:
                  original_content = f.read()
              print(f"Read {len(original_content)} characters from {target_file_path}")
          except FileNotFoundError:
              print(f"::error::Target file '{target_file_path}' not found.")
              sys.exit(1)
          except Exception as e:
              print(f"::error::Failed to read target file '{target_file_path}': {e}")
              sys.exit(1)

          # --- Construct Prompt ---
          # This prompt structure is crucial for good results. Adjust as needed.
          system_prompt = f"""You are an AI programming assistant integrated into a GitHub Actions workflow.
          Your task is to modify the provided code file based on a GitHub issue request.
          Follow these instructions carefully:
          1.  Analyze the user's request (from the issue body) and the provided code context.
          2.  Modify the code in '{target_file_path}' to address the issue.
          3.  Adhere to the additional context: {ai_context}
          4.  IMPORTANT: Output ONLY the complete, modified code for the file '{target_file_path}'.
          5.  Do NOT include any explanations, apologies, introductions, or markdown formatting (like ```typescript ... ```) around the code.
          6.  If the request is ambiguous, cannot be fulfilled securely, or requires changes outside '{target_file_path}', respond with the original code unmodified.
          7.  Ensure the generated code is syntactically correct and maintains existing style conventions.
          """

          user_prompt = f"""GitHub Issue Title: {issue_title}

          GitHub Issue Body (User Request):
          ---
          {issue_body}
          ---

          Current content of '{target_file_path}':
          ---
          {original_content}
          ---

          Please provide the complete, modified code for '{target_file_path}' based *only* on the issue description and context. Remember to output ONLY the raw code.
          """

          # --- Call OpenAI API ---
          modified_content = None
          try:
              print("Calling OpenAI API...")
              client = OpenAI(api_key=openai_api_key) # Uses OPENAI_API_KEY env var by default
              response = client.chat.completions.create(
                  model=model_name,
                  messages=[
                      {"role": "system", "content": system_prompt},
                      {"role": "user", "content": user_prompt},
                  ],
                  temperature=0.2, # Lower temperature for more deterministic code generation
                  # max_tokens=... # Optional: set a limit based on file size/complexity
              )

              if response.choices:
                  modified_content = response.choices[0].message.content.strip()
                  print(f"Received {len(modified_content)} characters from OpenAI.")
                  # Simple check to remove potential markdown code fences if the model ignored instructions
                  modified_content = re.sub(r'^```[a-zA-Z]*\n?', '', modified_content) # Remove opening fence
                  modified_content = re.sub(r'\n?```$', '', modified_content) # Remove closing fence
                  modified_content = modified_content.strip() # Strip again after removing fences
              else:
                  print("::warning::OpenAI response did not contain any choices.")

          except RateLimitError:
              print("::error::OpenAI API rate limit exceeded. Please check your plan and usage.")
              sys.exit(1) # Fail the step on rate limit
          except APIError as e:
              print(f"::error::OpenAI API error: {e}")
              sys.exit(1) # Fail the step on API error
          except Exception as e:
              print(f"::error::An unexpected error occurred during the OpenAI API call: {e}")
              sys.exit(1) # Fail the step on other errors

          # --- Process Response and Write File ---
          github_output_path = os.getenv('GITHUB_OUTPUT')
          if modified_content and modified_content != original_content:
              print(f"AI generated new content. Writing to {target_file_path}")
              try:
                  with open(target_file_path, 'w', encoding='utf-8') as f:
                      f.write(modified_content)
                  # Set outputs for subsequent steps using GITHUB_OUTPUT
                  with open(github_output_path, 'a') as f:
                      f.write("modified=true\n")
                      f.write(f"modified_file={target_file_path}\n")
                  print("Successfully applied AI modifications.")
              except Exception as e:
                  print(f"::error::Failed to write modified content to '{target_file_path}': {e}")
                  with open(github_output_path, 'a') as f:
                      f.write("modified=false\n") # Mark as not modified if write fails
                  sys.exit(1) # Fail the step if write fails
          elif modified_content == original_content:
              print("AI returned the original content. No changes applied.")
              with open(github_output_path, 'a') as f:
                  f.write("modified=false\n")
          else:
              print("::warning::AI did not return valid content or failed. No changes applied.")
              with open(github_output_path, 'a') as f:
                  f.write("modified=false\n")

          EOF

      # ====================================================================
      # PLACEHOLDER: Add Linting / Static Analysis / Security Scan Step Here
      # ====================================================================
      # - name: Lint and Scan Modified File
      #   if: steps.apply_ai_fix.outputs.modified == 'true'
      #   run: |
      #     MODIFIED_FILE="${{ steps.apply_ai_fix.outputs.modified_file }}"
      #     echo "Linting $MODIFIED_FILE..."
      #     # Add your linting command (e.g., npx eslint $MODIFIED_FILE --fix)
      #     # Add your formatting command (e.g., npx prettier --write $MODIFIED_FILE)
      #     # Add your security scan command (e.g., semgrep scan --config auto $MODIFIED_FILE)
      #     # If linting/scanning fails, exit with non-zero code to fail the workflow
      #     # Example: npx eslint $MODIFIED_FILE || exit 1
      #     # Example: semgrep scan --config auto --error $MODIFIED_FILE || exit 1
      #     # Re-add the file if linting/formatting modified it
      #     # git add $MODIFIED_FILE

      # Step 6: Commit and Push Changes
      - name: Commit and Push Changes
        id: commit_and_push
        # Run only if AI modified the file (and optional lint/scan step passed)
        if: steps.apply_ai_fix.outputs.modified == 'true'
        run: |
          MODIFIED_FILE="${{ steps.apply_ai_fix.outputs.modified_file }}"
          echo "Adding $MODIFIED_FILE to git staging area."
          git add "$MODIFIED_FILE"

          ISSUE_NUMBER="${{ steps.check_issue.outputs.issue_number }}"
          # Use the raw title directly in the commit message
          ISSUE_TITLE="${{ steps.check_issue.outputs.issue_title }}"
          # Construct commit message - ensure it handles potential newlines in title if necessary
          COMMIT_MSG=$(printf "feat(ai): Apply AI fix for issue #%s\n\n%s" "$ISSUE_NUMBER" "$ISSUE_TITLE")

          echo "Committing changes..."
          # Use 'git commit' exit code to check if commit was successful
          if git commit -m "$COMMIT_MSG"; then
            echo "Changes committed."
            # Use PAT for push if required by branch protection or repo settings
            # git push -u origin ${{ steps.create_branch.outputs.branch_name }} --porcelain --progress
            git push -u origin ${{ steps.create_branch.outputs.branch_name }}
            echo "Changes pushed to branch ${{ steps.create_branch.outputs.branch_name }}"
            echo "committed=true" >> $GITHUB_OUTPUT
          else
            echo "Commit failed - likely no changes detected after 'git add'."
            echo "committed=false" >> $GITHUB_OUTPUT
            # Optionally fail the workflow if commit fails unexpectedly
            # exit 1
          fi

      # Step 7: Create Pull Request
      - name: Create Pull Request
        id: create_pr
        # Run only if changes were successfully committed and pushed
        if: steps.commit_and_push.outputs.committed == 'true'
        uses: actions/github-script@v7
        env:
            # Pass data needed by the script via environment
            BRANCH_NAME: ${{ steps.create_branch.outputs.branch_name }}
            ISSUE_NUMBER: ${{ steps.check_issue.outputs.issue_number }}
            DEFAULT_BRANCH: ${{ steps.default_branch.outputs.name }}
            ISSUE_TITLE: ${{ steps.check_issue.outputs.issue_title }}
            ISSUE_BODY: ${{ steps.check_issue.outputs.issue_body }}
            AI_REVIEWER: ${{ env.AI_REVIEWER }}
        with:
          github-token: ${{ env.ACTION_PAT }} # Use PAT to ensure permissions and trigger potential other workflows
          script: |
            // Retrieve env vars within the script
            const branchName = process.env.BRANCH_NAME;
            const issueNumber = parseInt(process.env.ISSUE_NUMBER);
            const defaultBranch = process.env.DEFAULT_BRANCH;
            const issueTitle = process.env.ISSUE_TITLE;
            const issueBody = process.env.ISSUE_BODY;
            const aiReviewer = process.env.AI_REVIEWER;

            console.log(`Creating PR for branch: ${branchName} targeting ${defaultBranch}`);
            console.log(`Related Issue: #${issueNumber}`);

            // Prepare PR body
            const prBody = `**⚠️ AI-Generated Code Suggestion ⚠️**

            This PR provides an AI-generated suggestion to address issue #${issueNumber}.

            **Requires careful human review before merging.**

            **Original Issue Request:**
            \`\`\`
            ${issueBody.replace(/`/g, '\\`')}
            \`\`\`

            Closes #${issueNumber}`; // Automatically closes issue when PR merges

            try {
              const { data: pullRequest } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `feat(ai): Fix issue #${issueNumber} - ${issueTitle}`,
                body: prBody,
                head: branchName,
                base: defaultBranch,
                draft: true // Create as draft PR to encourage review
              });

              console.log(`Created Draft PR #${pullRequest.number}: ${pullRequest.html_url}`);
              core.setOutput('pr_number', pullRequest.number.toString());
              core.setOutput('created_pr', 'true'); // Signal that PR was created

              // Comment on the issue after creating the PR
              try {
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber,
                    body: `✅ AI has created Draft PR #${pullRequest.number} as a potential solution for this issue. Please review carefully: ${pullRequest.html_url}`
                  });
                  console.log(`Commented on issue #${issueNumber}`);
              } catch (commentError) {
                  console.warn(`⚠️ Failed to comment on issue #${issueNumber}: ${commentError.message}`);
              }


              // Request review
              if (aiReviewer) {
                try {
                  let reviewers = [];
                  let team_reviewers = [];
                  // Check if reviewer is likely a team slug (contains '/')
                  if (aiReviewer.includes('/')) {
                      team_reviewers.push(aiReviewer.split('/').pop()); // Get team slug part
                      console.log(`Requesting review from team: ${team_reviewers[0]}`);
                  } else {
                      reviewers.push(aiReviewer);
                      console.log(`Requesting review from user: ${reviewers[0]}`);
                  }

                  await github.rest.pulls.requestReviewers({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: pullRequest.number,
                    reviewers: reviewers,
                    team_reviewers: team_reviewers
                  });
                  console.log(`Successfully requested review from '${aiReviewer}'`);
                } catch (reviewError) {
                  console.warn(`⚠️ Failed to add reviewer '${aiReviewer}': ${reviewError.message}. This might require specific permissions or the user/team may not exist.`);
                }
              } else {
                  console.log("No AI_REVIEWER specified, skipping review request.");
              }

            } catch (error) {
                console.error(`Error creating PR or interacting with issue/reviewers: ${error.stack}`);
                core.setFailed(`Failed to create PR or perform post-creation steps: ${error.message}`);
                core.setOutput('created_pr', 'false');
            }

      # Step 8: Handle cases where PR wasn't created
      - name: Notify Skipped PR Creation
        if: steps.check_issue.outputs.should_process != 'true' || steps.apply_ai_fix.outputs.modified != 'true' || steps.commit_and_push.outputs.committed != 'true'
        run: |
          echo "Skipping PR creation because preconditions were not met (issue skipped, AI made no changes, or commit failed)."
          # No outputs needed from this step, the create_pr step handles its own failure/skip output setting

# ====================================================================
# Auto-Merge Job Removed
# ====================================================================
# The auto_merge_pr job has been removed due to the significant security risks
# associated with automatically merging AI-generated code without human review.
#
# Recommendations:
# 1. ALWAYS manually review AI-generated PRs carefully.
# 2. Use branch protection rules to enforce reviews.
# 3. If you need auto-merging based on approvals/checks (AFTER human review),
#    consider dedicated auto-merge Actions like 'pascalgn/automerge-action' or
#    GitHub's built-in auto-merge features, configured securely.
# ====================================================================